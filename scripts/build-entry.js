#!/usr/bin/env node

/**
 * Build Entry Script
 * Creates a single server.js entry point for the Next.js application
 * This script is run after `npm run build` to package the standalone build
 */

const fs = require('fs');
const path = require('path');

const DIST_DIR = path.join(__dirname, '..', 'dist');
const STANDALONE_DIR = path.join(__dirname, '..', '.next', 'standalone');
const SERVER_FILE = path.join(DIST_DIR, 'server.js');

// Ensure dist directory exists
if (!fs.existsSync(DIST_DIR)) {
  fs.mkdirSync(DIST_DIR, { recursive: true });
}

// Check if standalone build exists
if (!fs.existsSync(STANDALONE_DIR)) {
  console.error('Error: Standalone build not found. Please run "npm run build" first.');
  console.error('Expected location:', STANDALONE_DIR);
  process.exit(1);
}

// Create the server.js entry point
const serverContent = `#!/usr/bin/env node

/**
 * Single Entry Point Server
 * Auto-generated by build-entry.js
 */

// Set environment variables before loading the server
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
const port = parseInt(process.env.PORT || '3000', 10);

console.log(\`
========================================
Hello World Reference Application
========================================
Environment: \${process.env.NODE_ENV}
Node Version: \${process.version}
Port: \${port}
========================================
\`);

// The standalone server.js from Next.js handles everything
require('./server-internal.js');
`;

try {
  // Write the server entry point
  fs.writeFileSync(SERVER_FILE, serverContent, 'utf8');
  console.log('‚úÖ Created server.js entry point');

  // Copy the standalone build to dist
  const copyRecursive = (src, dest) => {
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true });
    }

    const entries = fs.readdirSync(src, { withFileTypes: true });

    for (let entry of entries) {
      const srcPath = path.join(src, entry.name);
      const destPath = path.join(dest, entry.name);

      if (entry.isDirectory()) {
        copyRecursive(srcPath, destPath);
      } else {
        fs.copyFileSync(srcPath, destPath);
      }
    }
  };

  // Copy entire standalone build contents to dist
  console.log('üì¶ Copying standalone build...');
  const standaloneEntries = fs.readdirSync(STANDALONE_DIR, { withFileTypes: true });
  for (let entry of standaloneEntries) {
    const srcPath = path.join(STANDALONE_DIR, entry.name);
    // Rename the original server.js to server-internal.js
    const destName = entry.name === 'server.js' ? 'server-internal.js' : entry.name;
    const destPath = path.join(DIST_DIR, destName);
    if (entry.isDirectory()) {
      copyRecursive(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }

  // Copy static files to the correct location within standalone structure
  const staticDir = path.join(__dirname, '..', '.next', 'static');
  if (fs.existsSync(staticDir)) {
    console.log('üìÅ Copying static files...');
    copyRecursive(staticDir, path.join(DIST_DIR, '.next', 'static'));
  }

  // Copy public directory to both locations for compatibility
  const publicDir = path.join(__dirname, '..', 'public');
  if (fs.existsSync(publicDir)) {
    console.log('üåê Copying public files...');
    copyRecursive(publicDir, path.join(DIST_DIR, 'public'));
  }

  // Create package.json for the dist
  const distPackageJson = {
    name: "hello-world-reference-dist",
    version: "1.0.0",
    description: "Hello World Reference Application - Distribution Build",
    main: "server.js",
    scripts: {
      start: "node server.js"
    },
    engines: {
      node: ">=18.0.0"
    }
  };

  fs.writeFileSync(
    path.join(DIST_DIR, 'package.json'),
    JSON.stringify(distPackageJson, null, 2),
    'utf8'
  );

  console.log('‚úÖ Created dist/package.json');

  // Clean up unnecessary packages
  console.log('üßπ Cleaning up unnecessary packages...');
  const packagesToRemove = ['@img', 'typescript', 'webpack', 'webpack-cli', '@webassemblyjs', 'terser-webpack-plugin'];
  for (const pkg of packagesToRemove) {
    const pkgPath = path.join(DIST_DIR, 'node_modules', pkg);
    if (fs.existsSync(pkgPath)) {
      fs.rmSync(pkgPath, { recursive: true, force: true });
      console.log(`  - Removed ${pkg}`);
    }
  }

  // Summary
  console.log('\\n========================================');
  console.log('‚ú® Build entry script completed!');
  console.log('========================================');
  console.log('\\nDistribution created at:', DIST_DIR);
  console.log('Entry point:', SERVER_FILE);
  console.log('\\nTo run the application:');
  console.log('  cd dist');
  console.log('  node server.js');
  console.log('\\nOr from the root:');
  console.log('  node dist/server.js');
  console.log('========================================\\n');

} catch (error) {
  console.error('‚ùå Error creating build entry:', error);
  process.exit(1);
}